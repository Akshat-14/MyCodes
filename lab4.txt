///Q1

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int main(int argc,char *argv[]){
	int rank,size,fact=1,factsum,i;

	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);

	for(i=1;i<=rank+1;i++){
		fact=fact*i;
	}
	MPI_Scan(&fact,&factsum,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD);

	if(rank==size-1)
	 printf("\n Sum is %d:",factsum);
	MPI_Finalize();
	return 0;

}


///Q2

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main(argc,argv)
int argc;
char *argv[];
{
    int done = 0, n, myid, numprocs, i;
    double PI25DT = 3.141592653589793238462643;
    double mypi, pi, h, sum, x;

    MPI_Init(&argc,&argv);
    MPI_Comm_size(MPI_COMM_WORLD,&numprocs);
    MPI_Comm_rank(MPI_COMM_WORLD,&myid);
    while (!done)
    {
	if (myid == 0) {
	    printf("Enter the number of intervals: (0 quits) ");
	    scanf("%d",&n);
	}
	MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (n == 0) break;

	h   = 1.0 / (double) n;
	sum = 0.0;
	for (i = myid + 1; i <= n; i += numprocs) {
	    x = h * ((double)i - 0.5);
	    sum += 4.0 / (1.0 + x*x);
	}
	mypi = h * sum;

	MPI_Reduce(&mypi, &pi, 1, MPI_DOUBLE, MPI_SUM, 0,
		   MPI_COMM_WORLD);

	if (myid == 0)
	    printf("pi is approximately %.16f, Error is %.16f\n",
		   pi, fabs(pi - PI25DT));
    }
    MPI_Finalize();
    return 0;
}


///Q3

#include <stdio.h>
#include "mpi.h"
int main(int argc, char* argv[])
{
	int rank, size, i, j, occur;
	int mat[3][3], find, X[3], count=0;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if(rank == 0)
	{
		fprintf(stdout, "Enter the matrix\n");
		for(i=0 ; i<3 ; i++)
			for(j=0 ; j<3 ; j++)
				scanf("%d", &mat[i][j]);
		fprintf(stdout, "Enter the element to be searched\n");
		scanf("%d", &find);
	}
	MPI_Bcast(&find, 1, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scatter(mat,3,MPI_INT,X,3,MPI_INT,0,MPI_COMM_WORLD);
	for(i=0 ; i<3 ; i++)
		if(X[i] == find)
			count++;
	MPI_Reduce(&count, &occur, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if(rank == 0) {
		printf("Total number of occurrence of %d is %d\n", find, occur);
	}
	MPI_Finalize();
	return 0;
}


///Q4

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc , char *argv[])
{
	int rank, size,i,sum=0;

	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	int n=1,ele,j;
	int a[20][20];
	int b[10];
	int count=0,tc=0;
	int error;
	MPI_Errhandler_set(MPI_COMM_WORLD,MPI_ERRORS_RETURN);

	if(rank == 0){
		scanf("%d",&ele);
		for(i=0;i<3;i++){
			for(j=0;j<3;j++){
				scanf("%d",&a[i][j]);
			}
		}
	}
	error = MPI_Bcast(&ele,1,MPI_INT,4,MPI_COMM_WORLD);

	if(error != MPI_SUCCESS){
		char s[100];
		int len, class1;
		MPI_Error_string(error,s,&len);
		MPI_Error_class(error,&class1);
		fprintf(stderr,"Error description is %s ",s);
		fflush(stderr);
		fprintf(stderr,"Error class is %d ",class1);
		fflush(stderr);
	}
	MPI_Scatter(a , 3, MPI_INT, b, 3, MPI_INT, 0, MPI_COMM_WORLD);
		for (i = 0; i < 3; i++) {
			if (b[i] == ele) {
				count += 1;
			}
		}
		MPI_Reduce(&count, &tc, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
		if (rank == 0) {
			fprintf(stdout,"Number of occurrences is %d",tc);
			fflush(stdout);
		}
		MPI_Finalize();
		return 0;
}

///Q5

#include <mpi.h>
#include <stdio.h>
#include <string.h>


int main (int argc, char* argv[]) {

	int rank, size;
	int i = 0, j;
	int k = 0, fac = 1, ans[1000], sum = 0;
	int n, a[100][100], b[100];

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	if (rank == 0) {
		//scanf_s("%d", &fac, 1);
		//scanf_s("%d", &n, 1);
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				scanf("%d", &a[i][j]);
			}
		}
	}
	//MPI_Bcast(&fac, 1, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scatter(a, 100, MPI_INT, b, 100, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scan(b, ans, 4, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
	//int count = 0;
	for (i = 0; i < 4; i++) {
		printf("%d ", ans[i]);
		//fprintf(stdout, "%d ", ans[i]);

	}
	//fflush(stdout);

	MPI_Finalize();

	return 0;
}


