Sample + Q1a + Q1b + Q2a + Q2b + Q2c

/////////////////////////////////////////////////Sample Program--------------------------

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define WA  9
#define HA  9
#define WB  9
#define HB  9
#define WC  9
#define HC  9


__device__ int getGlobalIdx_2D_1D(){
int blockIdYd = blockIdx.x * gridDim.y + blockIdx.y;
int threadIdYd = blockIdYd * blockDim.y + threadIdx.y;
return threadIdYd;
}

__global__ void MatMult( int* A,  int* B, int* C){

		   int idy=getGlobalIdx_2D_1D();


		  for(int i=0;i<gridDim.x;i++)
		  {
		   int id=idy*gridDim.x+i;


		   for(int w=0;w<WA;w++)
		   {
			   for(int z=0;z<HB;z++)

			   {
					C[w*WB+id]+= A[w*HB+z] * B[id+z*WB];
			   }

		   }
		  }

       }

int main(){

int A[WA*HA];
int B[WB*HB];
int C[WC*HC]={0};
for(int i=0;i<WA*HA;i++)
		A[i]=1;
for(int i=0;i<WB*HB;i++)
		B[i]=1;
int (*pA), (*pB), (*pC);

cudaMalloc((void**)&pA, (WA*HA)*sizeof(int));
cudaMalloc((void**)&pB, (WB*HB)*sizeof(int));
cudaMalloc((void**)&pC, (WC*HC)*sizeof(int));

cudaMemcpy(pA, A, (WA*HA)*sizeof(int), cudaMemcpyHostToDevice);
cudaMemcpy(pB, B, (WB*HB)*sizeof(int), cudaMemcpyHostToDevice);
cudaMemcpy(pC, C, (WC*HC)*sizeof(int), cudaMemcpyHostToDevice);

dim3 numBlocks = (3,3);
dim3 threadsPerBlock(1,1);
MatMult<<<numBlocks,threadsPerBlock>>>(pA,pB,pC);

cudaMemcpy(C, pC, (WC*HC)*sizeof(int), cudaMemcpyDeviceToHost);

int i, j=0;; printf("C = \n");
for(i=0;i<WC*HC;i++){
	if(j%WC==0) printf(" \n");
    printf("%d ", C[i]);
	j++;
    }
    printf("\n");


cudaFree(pA);
cudaFree(pB);
cudaFree(pC);

printf("\n");

return 0;
}

--------------------------------------------******************************************************************

//////////////////////////////////////////////Add two vectors using blocksize


#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

#define M 6

__global__ void add (int *A, int *B, int *C) {
	int idx = blockIdx.x;
    printf("idx = %d\n", idx);
    C[idx] = A[idx] + B[idx];
}

int main () {
    
    // Host copies of the variables
    int A[M], B[M], C[M];

    int i, j;
    for (i = 0; i < M; ++i) {
        A[i] = i + 1;
        B[i] = M - i - 1;
    }

    // Device copies of the variables
    int *d_a, *d_b, *d_c;

    int size = sizeof(int) * M;

    // Allocate memories to device copies of the objects
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy inputs to device
    cudaMemcpy(d_a, &A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, &B, size, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    add<<<M, 1>>>(d_a, d_b, d_c);

    // Copy the result back to the host
    cudaMemcpy(&C, d_c, size, cudaMemcpyDeviceToHost);

    // Outpoooot it
    printf("A:\n");
    for (j = 0; j < M; ++j) {
        printf("%d\t", A[j]);
    }
    printf("\n");

    printf("B:\n");
    for (j = 0; j < M; ++j) {
        printf("%d\t", B[j]);
    }
    printf("\n");

    printf("A + B:\n");
    for (j = 0; j < M; ++j) {
        printf("%d\t", C[j]);
    }
    printf("\n");

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

	getchar();

    return 0;
}

-----------------------------------------------******************************************************

//////////////////////////////////// Add 2 vectors using N threads

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

#define M 6

__global__ void add (int *A, int *B, int *C) {
	int idx = threadIdx.x;
    printf("idx = %d\n", idx);
    C[idx] = A[idx] + B[idx];
}

int main () {

    // Host copies of the variables
    int A[M], B[M], C[M];

    int i, j;
    for (i = 0; i < M; ++i) {
        A[i] = i + 1;
        B[i] = M - i - 1;
    }

    // Device copies of the variables
    int *d_a, *d_b, *d_c;

    int size = sizeof(int) * M;

    // Allocate memories to device copies of the objects
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy inputs to device
    cudaMemcpy(d_a, &A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, &B, size, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    add<<<1, M>>>(d_a, d_b, d_c);

    // Copy the result back to the host
    cudaMemcpy(&C, d_c, size, cudaMemcpyDeviceToHost);

    // Outpoooot it
    printf("A:\n");
    for (j = 0; j < M; ++j) {
        printf("%d\t", A[j]);
    }
    printf("\n");

    printf("B:\n");
    for (j = 0; j < M; ++j) {
        printf("%d\t", B[j]);
    }
    printf("\n");

    printf("A + B:\n");
    for (j = 0; j < M; ++j) {
        printf("%d\t", C[j]);
    }
    printf("\n");

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

	getchar();

    return 0;
}

---------------------------------------------------------************************************

//////////////////////////////////////Each row of resultant matrix to be computed by 1 thread (2a)

include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

// It's a M * N matrix
#define M 3
#define N 4

// Each row of matrix is computed by one thread

__global__ void add (int *A, int *B, int *C) {
    // Get the 1D Array index of the matrix
    int idx = threadIdx.x;
    printf("idx = %d\n", idx);
    for (int i = 0; i < M; ++i) {
        C[i + M * idx] = A[i + M * idx] + B[i + M * idx];
    }
}

int main () {
    
    // Host copies of the variables
    int A[M * N], B[M * N], C[M * N];

    int i, j;
    for (i = 0; i < M * N; ++i) {
        A[i] = i + 1;
        B[i] = M * N - i - 1;
    }

    // Device copies of the variables
    int *d_a, *d_b, *d_c;

    int size = sizeof(int) * M * N;

    // Allocate memories to device copies of the objects
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy inputs to device
    cudaMemcpy(d_a, &A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, &B, size, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    add<<<1, N>>>(d_a, d_b, d_c);

    // Copy the result back to the host
    cudaMemcpy(&C, d_c, size, cudaMemcpyDeviceToHost);

    // Outpoooot it
    printf("A:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", A[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("B:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", B[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("A + B:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", C[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    getchar();

    return 0;
}

--------------------------------------------------------***************************************
////////////////////////////////////Each column of the resultant matrix is computed by 1 thread 2(b)

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

// It's a M * N matrix
#define M 3
#define N 4

// Each column is computed on one thread

__global__ void add (int *A, int *B, int *C) {
    // Get the 1D Array index of the matrix
    int idx = threadIdx.x;
    printf("idx = %d\n", idx);
    for (int i = 0; i < N; ++i, idx += M) {
        C[idx] = A[idx] + B[idx];
    }
}

int main () {

    // Host copies of the variables
    int A[M * N], B[M * N], C[M * N];

    int i, j;
    for (i = 0; i < M * N; ++i) {
        A[i] = i + 1;
        B[i] = M * N - i - 1;
    }

    // Device copies of the variables
    int *d_a, *d_b, *d_c;

    int size = sizeof(int) * M * N;

    // Allocate memories to device copies of the objects
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy inputs to device
    cudaMemcpy(d_a, &A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, &B, size, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    add<<<1, N>>>(d_a, d_b, d_c);

    // Copy the result back to the host
    cudaMemcpy(&C, d_c, size, cudaMemcpyDeviceToHost);

    // Outpoooot it
    printf("A:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", A[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("B:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", B[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("A + B:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", C[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    getchar();

    return 0;
}

-------------------------------------------------------************************************

//////////////////////////////////////////////// Each element of resultant matrix is computed by 1 thread 2(c)

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

// It's a M * N matrix
#define M 3
#define N 4

// Each column is computed on one thread

__global__ void add (int *A, int *B, int *C) {
    // Get the 1D Array index of the matrix
    int idx = threadIdx.x;
    printf("idx = %d\n", idx);
    for (int i = 0; i < N; ++i, idx += M) {
        C[idx] = A[idx] + B[idx];
    }
}

int main () {

    // Host copies of the variables
    int A[M * N], B[M * N], C[M * N];

    int i, j;
    for (i = 0; i < M * N; ++i) {
        A[i] = i + 1;
        B[i] = M * N - i - 1;
    }

    // Device copies of the variables
    int *d_a, *d_b, *d_c;

    int size = sizeof(int) * M * N;

    // Allocate memories to device copies of the objects
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy inputs to device
    cudaMemcpy(d_a, &A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, &B, size, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    add<<<1, N>>>(d_a, d_b, d_c);

    // Copy the result back to the host
    cudaMemcpy(&C, d_c, size, cudaMemcpyDeviceToHost);

    // Outpoooot it
    printf("A:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", A[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("B:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", B[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("A + B:\n");
    for (i = 0; i < N; ++i) {
        for (j = 0; j < M; ++j) {
            printf("%d\t", C[i * M + j]);
        }
        printf("\n");
    }
    printf("\n");

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    getchar();

    return 0;
}

------------------------------------------------------------******************************************




